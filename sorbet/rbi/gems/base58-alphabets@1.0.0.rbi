# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `base58-alphabets` gem.
# Please instead update this file by running `bin/tapioca gem base58-alphabets`.

# shared code for formats / variants with single char alphabets
#    e.g. Bitcoin, Flickr, ...
#
# source://base58-alphabets//lib/base58-alphabets/version.rb#3
module Base58
  class << self
    # encoding alphabet - letter-to-number by index / array
    #
    # source://base58-alphabets//lib/base58-alphabets/base58.rb#56
    def alphabet(klass: T.unsafe(nil)); end

    # source://base58-alphabets//lib/base58-alphabets/version.rb#13
    def banner; end

    # lets you use
    #   Base58.configure do |config|
    #      config.format     =  :bitcoin
    #   end
    #
    # source://base58-alphabets//lib/base58-alphabets/base58.rb#30
    def configuration; end

    # @yield [configuration]
    #
    # source://base58-alphabets//lib/base58-alphabets/base58.rb#34
    def configure; end

    # source://base58-alphabets//lib/base58-alphabets/base58.rb#50
    def decode_bin(str, klass: T.unsafe(nil)); end

    # source://base58-alphabets//lib/base58-alphabets/base58.rb#51
    def decode_hex(str, klass: T.unsafe(nil)); end

    # source://base58-alphabets//lib/base58-alphabets/base58.rb#49
    def decode_num(str, klass: T.unsafe(nil)); end

    # source://base58-alphabets//lib/base58-alphabets/base58.rb#46
    def encode_bin(data, klass: T.unsafe(nil)); end

    # source://base58-alphabets//lib/base58-alphabets/base58.rb#47
    def encode_hex(str, klass: T.unsafe(nil)); end

    # source://base58-alphabets//lib/base58-alphabets/base58.rb#45
    def encode_num(num, klass: T.unsafe(nil)); end

    # add convenience helper for format
    #
    # source://base58-alphabets//lib/base58-alphabets/base58.rb#39
    def format; end

    # source://base58-alphabets//lib/base58-alphabets/base58.rb#40
    def format=(value); end

    # decoding letter-to-number mapping / hash
    #
    # source://base58-alphabets//lib/base58-alphabets/base58.rb#59
    def number(klass: T.unsafe(nil)); end

    # source://base58-alphabets//lib/base58-alphabets/version.rb#17
    def root; end

    # source://base58-alphabets//lib/base58-alphabets/version.rb#9
    def version; end
  end
end

# source://base58-alphabets//lib/base58-alphabets/base.rb#6
class Base58::Base
  class << self
    # (private) helper - note: leading underscore in name e.g. _bytes
    #
    # source://base58-alphabets//lib/base58-alphabets/base.rb#92
    def _bytes(num, base: T.unsafe(nil)); end

    # bytes_to_num
    #
    # source://base58-alphabets//lib/base58-alphabets/base.rb#104
    def _pack(bytes); end

    # todo/check: add alias e.g. strip_hex_prefix or such - why? why not?
    #
    # source://base58-alphabets//lib/base58-alphabets/base.rb#113
    def _strip0x(str); end

    # source://base58-alphabets//lib/base58-alphabets/base.rb#69
    def decode_bin(str); end

    # source://base58-alphabets//lib/base58-alphabets/base.rb#83
    def decode_hex(str); end

    # Converts a base58 string to a base10 integer.
    #
    # source://base58-alphabets//lib/base58-alphabets/base.rb#58
    def decode_num(str); end

    # Converts binary string into its Base58 representation.
    # If string is empty returns an empty string.
    #
    # source://base58-alphabets//lib/base58-alphabets/base.rb#27
    def encode_bin(data); end

    # Converts hex string into its Base58 representation.
    #
    # @raise [ArgumentError]
    #
    # source://base58-alphabets//lib/base58-alphabets/base.rb#46
    def encode_hex(str); end

    # Converts a base10 integer to a base58 string.
    #
    # source://base58-alphabets//lib/base58-alphabets/base.rb#17
    def encode_num(num); end
  end
end

# ALPHABET.length == 58   ## 58 chars/letters/digits
#
# source://base58-alphabets//lib/base58-alphabets/base.rb#8
Base58::Base::BASE = T.let(T.unsafe(nil), Integer)

# check if it is a hex (string)
#  - allow optiona 0x or 0X  and allow abcdef and ABCDEF
#
# source://base58-alphabets//lib/base58-alphabets/base.rb#12
Base58::Base::HEX_RE = T.let(T.unsafe(nil), Regexp)

# source://base58-alphabets//lib/base58-alphabets/bitcoin.rb#4
class Base58::Bitcoin < ::Base58::Base
  class << self
    # add alpha / char aliases - why? why not?
    #
    # source://base58-alphabets//lib/base58-alphabets/bitcoin.rb#11
    def alphabet; end

    # add num alias - why? why not?
    #
    # source://base58-alphabets//lib/base58-alphabets/bitcoin.rb#79
    def number; end
  end
end

# source://base58-alphabets//lib/base58-alphabets/bitcoin.rb#6
Base58::Bitcoin::ALPHABET = T.let(T.unsafe(nil), Array)

# add shortcuts (convenience) aliases
#
# source://base58-alphabets//lib/base58-alphabets/bitcoin.rb#82
Base58::Bitcoin::NUM = T.let(T.unsafe(nil), Hash)

# source://base58-alphabets//lib/base58-alphabets/bitcoin.rb#18
Base58::Bitcoin::NUMBER = T.let(T.unsafe(nil), Hash)

# source://base58-alphabets//lib/base58-alphabets/base58.rb#3
class Base58::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://base58-alphabets//lib/base58-alphabets/base58.rb#12
  def initialize; end

  # Returns the value of attribute format.
  #
  # source://base58-alphabets//lib/base58-alphabets/base58.rb#10
  def format; end

  # source://base58-alphabets//lib/base58-alphabets/base58.rb#16
  def format=(value); end
end

# source://base58-alphabets//lib/base58-alphabets/base58.rb#5
Base58::Configuration::MAPPING = T.let(T.unsafe(nil), Hash)

# source://base58-alphabets//lib/base58-alphabets/flickr.rb#4
class Base58::Flickr < ::Base58::Base
  class << self
    # add alpha / char aliases - why? why not?
    #
    # source://base58-alphabets//lib/base58-alphabets/flickr.rb#11
    def alphabet; end

    # add num alias - why? why not?
    #
    # source://base58-alphabets//lib/base58-alphabets/flickr.rb#79
    def number; end
  end
end

# source://base58-alphabets//lib/base58-alphabets/flickr.rb#6
Base58::Flickr::ALPHABET = T.let(T.unsafe(nil), Array)

# add shortcuts (convenience) aliases
#
# source://base58-alphabets//lib/base58-alphabets/flickr.rb#82
Base58::Flickr::NUM = T.let(T.unsafe(nil), Hash)

# source://base58-alphabets//lib/base58-alphabets/flickr.rb#18
Base58::Flickr::NUMBER = T.let(T.unsafe(nil), Hash)

# source://base58-alphabets//lib/base58-alphabets/version.rb#4
Base58::MAJOR = T.let(T.unsafe(nil), Integer)

# source://base58-alphabets//lib/base58-alphabets/version.rb#5
Base58::MINOR = T.let(T.unsafe(nil), Integer)

# source://base58-alphabets//lib/base58-alphabets/version.rb#6
Base58::PATCH = T.let(T.unsafe(nil), Integer)

# source://base58-alphabets//lib/base58-alphabets/version.rb#7
Base58::VERSION = T.let(T.unsafe(nil), String)
